생성자 : new 연산자로 클래스로부터 객체를 생성할 때 호출되어 객체의 초기화를 담당 

객체 초기화 = 필드를 초기화하거나 메소드를 호출해서 객체를 사용할 준비를 하는 것 
    생성자를 실행하지 않고는 클래스로부터 객체를 만들 수 없음 
    new연산자에 의해 생성자가 성공적으로 실행되면 힙 영역에 객체가 생성되고 객체의 번지가 리턴, 리턴된 객체의 번지는 클래스 변수에 저장됨 

모든 클래스는 생성자가 반드시 존재하며 생성자를 하나 이상 가질 수 있음 

클래스에 명시적으로 선언한 생성자가 1개라도 있으면 컴파일러는 기본 생성자를 추가하지 않음 
명시적으로 생성자를 선언하는 이유는 객체를 다양한 값으로 초기화 하기 위해서임 

//생성자 명시적으로 선언 
클래스 ( 매개변수 선언, ...) {
    객체의 초기화 코드 
}

리턴 타입이 없고 클래스 이름과 동일함 

매개변수 선언 -> 생략하거나 여러개를 선언 가능 
매개변수는 new연산자로 생성자를 호출할 때 외부의 값을 생성자 블록 내부로 전달하는 역할 수행 

클래스에 생성자가 명시적으로 선언되어 있을 경우 반드시 선언된 생성자를 호출해서 객체를 생성해야 함 

클래스로부터 객체가 생성될 때 필드는 기본 초기값으로 자동 설정 됨 

다른 값으로 초기화하고 싶다 
=> 1. 필드를 선언할 때 초기값 주는 방법 -> 동일한 클래스로부터 생성되는 객체들은 모두 같은 값을 가직 ㅔ됨  
   2. 생성자에게 초기값을 주는 방법 

객체 생성 시점에 외부에서 제공되는 다양한 값들로 초기화되어야 한다면 생성자에게 초기화 해야함 

this : 객체 자신의 참조 

생성자 오버로딩 : 매개변수를 달리하는 생성자를 여러 개 선언하는 것 
ex>
public class Car() {
    Car() {}
    Car(String model) {}
    Car(String model, String color) {}
}

주의점 : 매개 변수의 타입과 개수, 선언된 순서가 똑같을 경우 매개변수 이름만 바꾸는 것은 생성자 오버로딩이 아님 

생성자가 오버로딩 되어있을 경우 new 연산자로 생성자를 호출 할 때 제공되는 매개값의 타입과 수에 의해 호출될 생성자가 결정됨 

생성자 오버로딩이 많아질 경우 -> 생성자 간의 중복된 코드 발생 가능 
매개변수의 수만 달리하고 초기화 내용이 비슷한 생성자에서 이러한 현상 생김 
=> 필드 초기화 내용은 한 생성자에만 집중적으로 작성하고 나머지 생성자는 초기화 내용을 가지고 있는 생성자를 호출하는 방법으로 개선 

생성자에서 다른 생성자를 호출할 때 this() 코드사용 

클래스 ( [매개변수, ...] ) {
    this( 매개변수, ,,, , 값, ,, ); // 클래스의 다른 생성자 호출 
    실행문;
}

this()는 자신의 다른 생성자를 호출하는 코드로 반드시 생성자의 첫줄에만 허용 
this()의 매개값은 호출되는 생성자의 매개 변수에 맞게 제공해야 함 
this() 다음에는 추가적인 실행문들 올 수 있음 즉 호출되는 생성자의 실행이 끝나면 원래 생성자로 돌아와서 다음 실행문을 진행 

