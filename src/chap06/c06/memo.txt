패키지 : 파일 시스템의 폴더로 폴더기능을 하며 클래스의 밀부분으로 클래스를 유일하게 만들어주는 식별자 역할을 수행
클래스 이름이 동일하더라도 패키지가 다르면 다른 클래스로 인식 
클래스만 따로 복사해서 다른 곳으로 이동하면 클래스를 사용할 수 없기 때문에 패키지는 클래스의 일부분이다 
선언 :
package 상위패키지.하위패키지;
public class ClassName {}

import문 : 사용하고자 하는 클래스 또는 인터페이스가 다른 패키지에 소속되어있을때 사용하게 해줌 
패키지 선언과 클래스 선언 사이에 작성하며 여러개 사용 가능 
선언 : 
import 상위패키지.하위패키지.클래스이름;
import 상위패키지.하위패키지.*;

상위 패키지를 import했다고 해서 하위패키지까지 import되는 것은 아님 

서로다른 패키지에 동일한 클래스이름이 존재하고 두 패키지가 모두 import 되면 컴파일러는 어떤 클래스의 패키지를 사용해야하는지 모호해져 컴파일에러 발생 
-> 정확하게 패키지가 포함된 클래스 전체 이름 기술 필요 

접근제한자 : 클래스 및 인터페이스 그리고 이들이 가지고 있는 멤버의 접근을 제한하기 위해 사용
    public : 외부 클래스가 자유롭게 사용 가능
    protected : 같은 패키지 또는 자식클래스에서 사용 가능
    private : 외부에서 사용할 수 없음 
    default : 같은 패키지에 소속된 클래스에서만 사용 가능 *위 세가지 접근 제한자가 적용되지 않았을떄 
    